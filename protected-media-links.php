<?php
/**
 * @formatter:off
 * Plugin Name:       Protected Media Links
 * Plugin URI:        https://example.com/protected-media-links
 * Description:       Protects media files from direct public access, allowing access for search engine bots, authorized users via unique tokens, and specific user/role exclusions.
 * Version:           1.1.0
 * Author:            TWP Technologies
 * Author URI:        https://example.com
 * License:           GPL-2.0-or-later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       protected-media-links
 * Domain Path:       /languages
 * Requires PHP:      7.4
 * Requires WP:       5.9
 * @formatter:on
 */

// Exit if accessed directly.
if ( !defined( 'ABSPATH' ) )
{
    exit;
}

// Load shared plugin constants.
require_once __DIR__ . '/pml-constants.php';

$pml_generated_links_cache = [];

/**
 * Checks PHP and WordPress versions.
 *
 * @return bool True if compatible, false otherwise.
 */
function pml_compatibility_check(): bool
{
    if ( version_compare( PHP_VERSION, PML_MIN_PHP_VERSION, '<' ) )
    {
        add_action( 'admin_notices', 'pml_php_version_notice' );
        return false;
    }
    if ( version_compare( get_bloginfo( 'version' ), PML_MIN_WP_VERSION, '<' ) )
    {
        add_action( 'admin_notices', 'pml_wp_version_notice' );
        return false;
    }
    return true;
}

/** Displays an admin notice if PHP version is too low. */
function pml_php_version_notice()
{
    ?>
    <div class="notice notice-error">
        <p>
            <?php
            printf(
            /* translators: 1: Plugin Name, 2: Required PHP version, 3: Current PHP version */ esc_html__(
                                                                                                   '%1$s requires PHP version %2$s or higher. Your current version is %3$s. Please update PHP to use this plugin.',
                                                                                                   PML_TEXT_DOMAIN,
                                                                                               ),
                                                                                               esc_html( PML_PLUGIN_NAME ),
                                                                                               esc_html( PML_MIN_PHP_VERSION ),
                                                                                               esc_html( PHP_VERSION ),
            );
            ?>
        </p>
    </div>
    <?php
}

/** Displays an admin notice if WordPress version is too low. */
function pml_wp_version_notice()
{
    ?>
    <div class="notice notice-error">
        <p>
            <?php
            printf(
            /* translators: 1: Plugin Name, 2: Required WordPress version */
                esc_html__( '%1$s requires WordPress version %2$s or higher to function properly. Please update WordPress.', PML_TEXT_DOMAIN ),
                esc_html( PML_PLUGIN_NAME ),
                esc_html( PML_MIN_WP_VERSION ),
            );
            ?>
        </p>
    </div>
    <?php
}

// Perform compatibility check before proceeding.
if ( !pml_compatibility_check() )
{
    return;
}

/**
 * Class map autoloader for the plugin.
 * Relies on a 'pml-class-map.php' file being present in the 'includes' directory.
 * This map should be generated by a build script.
 *
 * @param string $class_name The fully-qualified class name.
 */
function pml_classmap_autoloader( string $class_name )
{
    static $class_map = null;

    // Load the class map only once.
    if ( null === $class_map )
    {
        $map_file = PML_PLUGIN_DIR . 'includes/pml-class-map.php';
        if ( file_exists( $map_file ) )
        {
            // The class map file returns an array.
            // Paths in the map are relative to the map file's directory (includes/)
            // and are constructed like: __DIR__ . '/path/to/class.php'
            $class_map = require $map_file;
        }
        else
        {
            // Class map is missing. Fallback or error.
            // For production, this should ideally not happen if the build process is correct.
            // We could log an error or display an admin notice.
            $class_map = []; // Empty map to prevent repeated file_exists checks.
            if ( defined( 'WP_DEBUG' ) && WP_DEBUG && is_admin() )
            {
                // Display a notice only if WP_DEBUG is on, to avoid issues on live sites if map is temporarily missing.
                add_action(
                    'admin_notices',
                    function () {
                        echo '<div class="notice notice-error is-dismissible"><p>';
                        echo '<strong>' . esc_html( PML_PLUGIN_NAME ) . ' Critical Error:</strong> ';
                        echo esc_html__(
                            'The class map file (includes/pml-class-map.php) is missing. Autoloading will fail. Please regenerate the class map using the build script or reinstall the plugin.',
                            PML_TEXT_DOMAIN,
                        );
                        echo '</p></div>';
                    },
                );
            }
            // Log the error for administrators to see.
            error_log( PML_PLUGIN_NAME . ' Error: Class map file not found at ' . $map_file . '. Autoloading may fail.' );
        }
    }

    // Check if the class exists in our map.
    if ( isset( $class_map[ $class_name ] ) )
    {
        $file_path = $class_map[ $class_name ];
        // The path in $class_map already includes __DIR__ (of the map file),
        // so it's an absolute path ready to be required.
        if ( file_exists( $file_path ) )
        {
            require_once $file_path;
        }
        else
        {
            // Log error if file specified in map doesn't exist.
            error_log( PML_PLUGIN_NAME . ' Error: Class map references a missing file for class ' . $class_name . ': ' . $file_path );
        }
    }
}

spl_autoload_register( 'pml_classmap_autoloader' );

/** Loads the plugin text domain for translation. */
function pml_load_textdomain()
{
    load_plugin_textdomain(
        PML_TEXT_DOMAIN,
        false,
        dirname( plugin_basename( PML_PLUGIN_FILE ) ) . '/languages/',
    );
}

add_action( 'plugins_loaded', 'pml_load_textdomain' );

/** Initializes the plugin. */
function pml_init_plugin()
{
    // Critical classes check (can be simplified if class map autoloader is robust)
    // For now, keeping a light check for PML_Core as it's the entry point.
    if ( !class_exists( 'PML_Core' ) )
    {
        if ( is_admin() )
        {
            add_action(
                'admin_notices',
                function () {
                    echo '<div class="notice notice-error"><p>' . sprintf(
                            esc_html__(
                                '%1$s core class (PML_Core) is missing or could not be autoloaded. The plugin cannot function correctly. Please ensure the class map is up to date or reinstall the plugin.',
                                PML_TEXT_DOMAIN,
                            ),
                            esc_html( PML_PLUGIN_NAME ),
                        ) . '</p></div>';
                },
            );
        }
        return; // Halt further initialization.
    }

    PML_Core::get_instance();   // Initialize the core plugin class.
    PML_Token_Manager::init();  // Initialize token manager (sets table name).

    // Schedule or clear cron job based on settings.
    if ( get_option( PML_PREFIX . '_settings_cleanup_tokens_enabled' ) )
    {
        if ( !wp_next_scheduled( PML_PREFIX . '_daily_token_cleanup_hook' ) )
        {
            wp_schedule_event( time(), 'daily', PML_PREFIX . '_daily_token_cleanup_hook' );
        }
    }
    else
    {
        wp_clear_scheduled_hook( PML_PREFIX . '_daily_token_cleanup_hook' );
    }

    add_action( 'wp_ajax_' . PML_PREFIX . '_search_users', 'pml_ajax_search_users' );
    add_action( 'wp_ajax_' . PML_PREFIX . '_search_media', 'pml_ajax_search_media' );
}

add_action( 'plugins_loaded', 'pml_init_plugin', 10 ); // Ensure it runs after classes might be loaded.

/** Handles AJAX request for searching users. */
function pml_ajax_search_users()
{
    // Verify nonce for security.
    check_ajax_referer( PML_PREFIX . '_search_users_nonce', '_ajax_nonce' );

    // Check user capabilities.
    if ( !current_user_can( 'edit_users' ) )
    {
        wp_send_json_error( [ 'message' => esc_html__( 'You do not have permission to search users.', PML_TEXT_DOMAIN ) ], 403 );
        return;
    }

    $search_term    = isset( $_GET[ 'q' ] ) ? sanitize_text_field( wp_unslash( $_GET[ 'q' ] ) ) : '';
    $page           = isset( $_GET[ 'page' ] ) ? absint( $_GET[ 'page' ] ) : 1;
    $users_per_page = 10;

    if ( empty( $search_term ) && $page === 1 )
    {
        // Send success with data key for Select2 compatibility
        wp_send_json_success( [ 'items' => [], 'total_count' => 0 ] );
        return;
    }

    $user_query_args = [
        'search'         => '*' . esc_attr( $search_term ) . '*',
        'search_columns' => [ 'ID', 'user_login', 'user_email', 'user_nicename', 'display_name' ],
        'number'         => $users_per_page,
        'paged'          => $page,
        'fields'         => [ 'ID', 'display_name', 'user_email' ],
        'orderby'        => 'display_name',
        'order'          => 'ASC',
    ];

    $user_query  = new WP_User_Query( $user_query_args );
    $users       = $user_query->get_results();
    $total_users = $user_query->get_total();

    $items = [];
    if ( !empty( $users ) )
    {
        foreach ( $users as $user )
        {
            $items[] = [
                'id'   => $user->ID,
                'text' => esc_html( $user->display_name . ' (' . $user->user_email . ')' ),
            ];
        }
    }

    // Send success with data key for Select2 compatibility
    wp_send_json_success(
        [
            'items'       => $items,
            'total_count' => $total_users,
        ],
    );
}

/** Handles AJAX request for searching media files (attachments). */
function pml_ajax_search_media()
{
    check_ajax_referer( 'pml_search_media_nonce', '_ajax_nonce' );
    if ( !current_user_can( 'upload_files' ) ) // Capability to view media library
    {
        wp_send_json_error( [ 'message' => esc_html__( 'Insufficient permissions.', PML_TEXT_DOMAIN ) ], 403 );
    }

    $search_term    = isset( $_GET[ 'q' ] ) ? sanitize_text_field( wp_unslash( $_GET[ 'q' ] ) ) : '';
    $page           = isset( $_GET[ 'page' ] ) ? absint( $_GET[ 'page' ] ) : 1;
    $posts_per_page = 10;

    $query_args = [
        'post_type'      => 'attachment',
        'post_status'    => 'inherit',
        'posts_per_page' => $posts_per_page,
        'paged'          => $page,
        's'              => $search_term,
    ];

    $query = new WP_Query( $query_args );
    $items = [];
    if ( $query->have_posts() )
    {
        while ( $query->have_posts() )
        {
            $query->the_post();
            $mime_type = get_post_mime_type( get_the_ID() );
            $items[]   = [
                'id'   => get_the_ID(),
                'text' => esc_html( get_the_title() . ' (ID: ' . get_the_ID() . ' | ' . $mime_type . ')' ),
            ];
        }
    }
    wp_reset_postdata();

    wp_send_json_success(
        [
            'items'       => $items,
            'total_count' => $query->found_posts,
        ],
    );
}

// Register activation, deactivation, and uninstall hooks.
// Ensure the PML_Install class is loaded before trying to use it.
// The classmap autoloader should handle this.
if ( class_exists( 'PML_Install' ) )
{
    register_activation_hook( PML_PLUGIN_FILE, [ 'PML_Install', 'activate' ] );
    register_deactivation_hook( PML_PLUGIN_FILE, [ 'PML_Install', 'deactivate' ] );
    register_uninstall_hook( PML_PLUGIN_FILE, [ 'PML_Install', 'uninstall' ] );
}
else
{
    // Fallback if PML_Install class isn't loaded, to prevent fatal errors on plugin list page actions.
    if ( is_admin() )
    {
        add_action(
            'admin_notices',
            function () {
                echo '<div class="notice notice-error"><p>' . sprintf(
                        esc_html__(
                            '%1$s installation/uninstallation controller class (PML_Install) is missing or could not be autoloaded. The plugin might not (de)activate or uninstall correctly. Please ensure the class map is up to date or reinstall the plugin.',
                            PML_TEXT_DOMAIN,
                        ),
                        esc_html( PML_PLUGIN_NAME ),
                    ) . '</p></div>';
            },
        );
    }
}

/** Executes the daily token cleanup cron job. */
function pml_execute_token_cleanup()
{
    if ( class_exists( 'PML_Token_Manager' ) )
    {
        PML_Token_Manager::cleanup_tokens();
    }
}

add_action( PML_PREFIX . '_daily_token_cleanup_hook', 'pml_execute_token_cleanup' );

/**
 * Adds a settings link to the plugin action links on the plugins page.
 *
 * @param array $links An array of plugin action links.
 *
 * @return array An array of plugin action links.
 */
function pml_add_settings_link( array $links ): array
{
    $settings_link = sprintf(
        "<a href=\"%s\">%s</a>",
        admin_url( 'admin.php?page=' . PML_PLUGIN_SLUG ),
        esc_html__( 'Settings', PML_TEXT_DOMAIN ),
    );
    array_unshift( $links, $settings_link );
    return $links;
}

add_filter( 'plugin_action_links_' . plugin_basename( PML_PLUGIN_FILE ), 'pml_add_settings_link' );

